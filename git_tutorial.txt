常用命令：
pwd：查看当前目录
ls：查看当前目录下的文件
cat readme.txt 查看文本文件的内容
rm test.txt 删除test.txt

别名：
st：status 
ci: commit
co: checkout
br: branch
unstage: 撤销暂存区的修改
last: 最后一次修改的信息
lg：log

一、创建仓库
1.创建新目录：
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

2.变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

二、添加文件
1.把文件放到目录下

2.把文件添加到仓库：
$ git add readme1.txt readme2.txt
$ git add readme3.txt

3.提交到仓库：
$ git commit -m "add 3 file"

三、查看工作区状态和修改内容
1.查看工作区状态
$ git status

2.查看修改的内容
$ git diff readme.txt

BS:如果中文乱码则把文件编码格式变为utf-8无bom编码格式

四、版本回退
1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id：
$ git reset --hard HEAD^
$ git reset --hard HEAD^^
$ git reset --hard HEAD~100
$ git reset --hard 3628164

2.回退前，可以查看提交历史，以便确定要回退到哪个版本：
$ git log
BS: 加参数一行显示：git log --pretty=oneline

3.要重返回退前的版本，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
$ git reflog

五、暂存区和工作区（概念）
工作区就是目录，比如learngit文件夹就是一个工作区；
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库；
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

执行git add命令实际上就是把要提交的所有修改放到暂存区（Stage）；
执行git commit就可以一次性把暂存区的所有修改提交到分支。

Git是如何跟踪修改的，不是跟踪文件，每次修改，如果不add到暂存区，那就不会加入到commit中。
好习惯是：每次commit之后都要看一下status，确定是否提交的是最新的文件。

六、撤销修改
1.当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时：
$ git checkout -- readme.txt
BS:会产生两种结果：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

2.当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按操作1操作：
$ git reset HEAD readme.txt

3.已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

七、删除文件
1. rm test.txt或者直接在工作区删除
2. 如果确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit，否则git checkout --file撤销删除。

八、添加远程库
1.在github上create一个叫git_tutorial的Repository。

2.到本地的需要添加的仓库下运行：
$ git remote add origin git@github.com:hwh199103/git_tutorial.git
BS：添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

3.把本地库的所有内容推送到远程库（第一次）：
$ git push -u origin master
BS:由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来。

4.下次只要本地做了提交，就可以通过下面命令推送到github上：
$ git push origin master

九、从远程库克隆到本地仓库
1.在github上创建仓库
2.克隆到本地仓库
$ git clone git@github.com:hwh199103/file_name.git

十、分支管理
1.创建分支：
第一种方法：
$ git checkout -b dev
第二种方法：
$ git branch dev （创建分支）
$ git checkout dev （切换分支）

2.查看当前分支：
$ git branch

3.合并分支：
$ git merge dev（在master分支下merge）

4.删除分支：
git branch -d dev

5.



十一、标签管理
1.创建标签：
$ git tag v1.0（HEAD上）
$ git tag v1.0 6224937（commit id上）
$ git tag -a v0.1 -m "version 0.1 released" 3628164 （带有说明的标签）

2.查看有哪些标签：
$ git tag
BS:标签不是按时间顺序列出，而是按字母排序的。

3.查看标签的信息，包括说明：
$ git show v0.1

4.删除本地标签：
$ git tag -d v0.1

5.推送标签：
$ git push origin v1.0 （推送一个）
$ git push origin --tags （推送全部）

6.删除远程标签要分两步，先删除本地标签，再删除远程标签：
$ git tag -d v0.9
$ git push origin :refs/tags/v0.9

7.私钥标签略，看网站

十二、使用github
1.在GitHub上，可以任意Fork开源仓库；
2.自己拥有Fork后的仓库的读写权限；
3.可以推送pull request给官方仓库来贡献代码。

十三、其他情况（忽略特殊文件，配置别名，搭建git服务器）
略，看网站。

参考：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000


